

// is 타입확인, 불리언, 
// as 캐스팅시도, 객체 반환, 캐스팅 실패시 null

// 딕셔너리 해시셋 차이
// 같은 해시구조다, 해시셋은 중복 값 저장 불가, 딕셔너리는 키, 벨류쌍이다.

// 리스트 링크드리스트 차이
// 중간삽입에 대한 차이점 얘기, 즉 시간 복잡도 언급 하면 베스트    리스트 는 배열 기반,   링크드리스트는 노드 기반

// Boxing Unbixing
// 참조 -> 값 박싱  값 -> 참조 언박싱, 오브젝트 형식 언급, 값형식데이터 넣는게 박싱 오브젝트 형ㅅ식의 데이터를 값형싟으로 캐스팅 하는게 언박싱

// 클래스와 구조체차이
// 상속 -> 메모리 -> 형식(값, 참조)

// 추상 인터페이스 차이
// 공통속성 일부기능 구현 가능

// 오버로딩, 오바라이딩
// 같은이름 매개변수 달리 하느게 오버로딩, 상속된 함수를 버츌얼 키워드를 통하여 다형성 구현

// Event Delegate
// (C++ 함수포인터) 함수의 타입화, 콜백, 이벤트는 랩핑 할수 있는 키워드다 -> 작동방식, 같은클래스에서만 호출 가능하게, 외부에서는 += 통하여 구독처리만 가능

// 람다
// 무명메서드

// func action, delegate 
// 셋다 같은 델리게이트다, 다만 액션과 펑크는 C#에서 미리 만들어둔 델리게이트 이다. 액션 펑크 설명

// 인덱서
// 객체를 배열처럼 인덱스를 통하여 접근할수 있게 하는 기능, 하지만 다른 용도로도 사용은 가능함

// 가변 고정 동적
// 고정 -> 크기고정
// 가변 -> 제기드 어레이 -> 그설명
// 동적 -> 리스트 예시

// 프로퍼티 무엇? 프라이빗 셋은 무엇?
// 프로퍼티는 캡슐화된 접근자 제공, 외부에서접근 불가 내부에서만 수정


// flooat f = 0.1f
// if (f == 0.1f)
// 오차범위로 체크해야된다

// 객체지향 언어란 무엇
// 클래스지향이라고도 볼수 있는 패러다임 언어로서, 추상, 상속, 캡슐, 다형의 개념을 활용하는 언어입니다. 재사용성, 유지보수성이 높다

// 몬스터클래스 구조체로 바꾸면 어떤 문제가 생기나요?
// 구조체는 값타입 이라 복사시 개별 복사본 생기는문제, 그래서 우리가 참조가 필요한 상황이었다면 다른 객체가 생기기 때문에 문제발생
// 상속구조를 활용하고 있었다면 그러한 구조가 깨짐

// 캐스팅 종류
// 명시적, 암시적, is, as, tryParse, 

// 부모자식클래스간 생성자 호출 순서
// 항상 부모생성자 먼저 호출 이라고 말해야함 (무조건)
// 그이유는, 부모의 필드가 초기화가 먼저 끝나야 되기 때문이다

// 제네릭 클래스
// 타입을 넘겨받아 여러타입으로 재사용 가능한 클래스, 런타임중 타입이 치환된다, 대표적으로 리스트, 또는 딕셔너리

// static 키워드
// 정적, 클래스에 종속, -> 클래스 수준에서 공유되는 멤버
// 인스턴스(객체) 없이 접근 가능, 모든 인스턴스가 공유

// 콘스트 키워드는 뭐냐?
// 상수 선언, 숫자의 이름화, 컴파일시 값 확정, 불변

// enum 이뭐냐?
// 상수의 집합, 숫자를 이름화한 그룹, 

// 리플레션
// 런타임중 해당 객체의 모든 멤버 및 메타데이터 에 대해 확인 조작 할수 있는 기능 입니다.

// 어트리뷰트
// 코드에 메타데이터를 기록할수 있는 기능, 리플렉션기능으로 읽어서 동작 제어 가능

// 절차지향 객체지향 차이
// 함수지향이다, 함수통해서 문제를 해결하는 방식 -> 절차
// 절차지향 장단점
// 객체지향 -> 클래스, 즉 객체를 통해서 문제를 해결하는 방식 ->

// 박싱 언박싱 대체법
// 제네릭, 안정성, 메모리 

// ref out
// 먼저 초기화 해야함 ->ref
// 먼저 초기화 안해도됨 ->out

// 값형식에 널 넣을수 있냐?
// 기본적으론 불가, 하지만 널러블 사용하면 가능, 타입에 물음표 붙여서 사용

// 아는 디자인 패턴
// 싱글턴, 옵저버, 스테이트 패턴

// DFS BFS 차이 설명
// DFS - 깊이우선, 재귀함수로 구현, 스택 으로도 구현, 끈긴길 찾기
// BFS - 너비우선, 큐를 구현, 최단거리 단, 가중치 없는 그래프에서 사용 
// 시간 복잡도는 O(V+E) 버텍스+엣지

// 벡터의 내적 외적
// 시약각 계산과 수직인 벡터 측정

// GC(Garbage Collector) 는 무엇인가?
// 닷넷의 자동 메모리 관리 기능, 참조가 없는 객체 제거

// 클래스와 인스턴스에 대해 설명
// 클래스는 객체의 설계도, 인스터스는 그 설계도를 바탕으로 실존하는 객체를 생성한것

// 트리
// 계층 구조를 표현하는 비선형 자료구조, 이진탐색트리, 힙 등이 있다. 루트, 부모, 자식등의 노드로 구성되어있다.

// 헤시테이블 == 해시구조 설명
// 비선형, 해시함수, 버킷의 개수로 모듈러 연산 하여 인덱스 형싱으로 저장 되는 방식 평균 O(1) [탐색] 시간 걸림 

// 힙 
//